import numpy as np
from scipy.signal import butter,filtfilt
import matplotlib.pyplot as plt
import math

a={'100': 13715.0, '101': 11922.0, '102': 11986.0, '103': 12018.0, '104': 11970.0, '105': 11970.0, '106': 11954.0, '107': 12002.0, '108': 11906.0, '109': 11986.0, '110': 11810.0, '111': 11954.0, '112': 11954.0, '113': 11826.0, '114': 11826.0, '115': 12050.0, '116': 11938.0, '117': 11810.0, '118': 11906.0, '119': 11954.0, '120': 11954.0, '121': 11826.0, '122': 11906.0, '123': 11858.0, '124': 11922.0, '125': 11874.0, '126': 11922.0, '127': 11778.0, '128': 11954.0, '129': 11810.0, '130': 11810.0, '131': 11922.0, '132': 11938.0, '133': 11890.0, '134': 11922.0, '135': 11954.0, '136': 11842.0, '137': 11842.0, '138': 11826.0, '139': 11778.0, '140': 11858.0, '141': 11186.0, '142': 11106.0, '143': 10946.0, '144': 11058.0, '145': 13475.0, '146': 13459.0, '147': 13651.0, '148': 13731.0, '149': 13091.0, '150': 13139.0, '151': 12979.0, '152': 13267.0, '153': 12707.0, '154': 12675.0, '155': 12899.0, '156': 12563.0, '157': 12867.0, '158': 12947.0, '159': 12547.0, '160': 12755.0, '161': 12883.0, '162': 12803.0, '163': 12883.0, '164': 12771.0, '165': 12867.0, '166': 12899.0, '167': 12547.0, '168': 12755.0, '169': 12947.0, '170': 12883.0, '171': 12883.0, '172': 12435.0, '173': 12883.0, '174': 12867.0, '175': 12963.0, '176': 13123.0, '177': 12963.0, '178': 12835.0, '179': 12387.0}
b={'100': 11938.0, '101': 11858.0, '102': 11874.0, '103': 11906.0, '104': 11874.0, '105': 11954.0, '106': 11794.0, '107': 11858.0, '108': 11970.0, '109': 11778.0, '110': 11954.0, '111': 11794.0, '112': 11906.0, '113': 11874.0, '114': 11922.0, '115': 11794.0, '116': 11858.0, '117': 11954.0, '118': 11906.0, '119': 13523.0, '120': 11810.0, '121': 11906.0, '122': 11842.0, '123': 11794.0, '124': 11746.0, '125': 11794.0, '126': 11810.0, '127': 11826.0, '128': 11874.0, '129': 11778.0, '130': 11794.0, '131': 11922.0, '132': 11810.0, '133': 11794.0, '134': 11810.0, '135': 12002.0, '136': 11874.0, '137': 11794.0, '138': 11794.0, '139': 11154.0, '140': 11522.0, '141': 11522.0, '142': 10914.0, '143': 11106.0, '144': 11170.0, '145': 13411.0, '146': 12611.0, '147': 12787.0, '148': 13059.0, '149': 12371.0, '150': 13683.0, '151': 13619.0, '152': 13587.0, '153': 12883.0, '154': 12851.0, '155': 12579.0, '156': 12899.0, '157': 12947.0, '158': 11058.0, '159': 12851.0, '160': 12963.0, '161': 12963.0, '162': 12627.0, '163': 12899.0, '164': 12995.0, '165': 11010.0, '166': 12835.0, '167': 12947.0, '168': 12547.0, '169': 12755.0, '170': 12947.0, '171': 12947.0, '172': 12563.0, '173': 12883.0, '174': 12931.0, '175': 12563.0, '176': 12755.0, '177': 13027.0, '178': 12947.0, '179': 12547.0}
c={'100': 12098.0, '101': 12066.0, '102': 12066.0, '103': 12002.0, '104': 12066.0, '105': 12082.0, '106': 11970.0, '107': 11970.0, '108': 12002.0, '109': 12018.0, '110': 11970.0, '111': 11938.0, '112': 11938.0, '113': 11938.0, '114': 11986.0, '115': 11970.0, '116': 11986.0, '117': 12034.0, '118': 11922.0, '119': 12002.0, '120': 11970.0, '121': 11890.0, '122': 12002.0, '123': 11906.0, '124': 11746.0, '125': 11970.0, '126': 11842.0, '127': 11906.0, '128': 11970.0, '129': 11682.0, '130': 11938.0, '131': 11858.0, '132': 11906.0, '133': 11554.0, '134': 11954.0, '135': 11842.0, '136': 11490.0, '137': 11730.0, '138': 11698.0, '139': 11266.0, '140': 11506.0, '141': 11410.0, '142': 11154.0, '143': 11138.0, '144': 11890.0, '145': 11698.0, '146': 11682.0, '147': 11826.0, '148': 11714.0, '149': 11618.0, '150': 11746.0, '151': 11458.0, '152': 11618.0, '153': 11666.0, '154': 11746.0, '155': 11490.0, '156': 11730.0, '157': 11666.0, '158': 11666.0, '159': 11666.0, '160': 11682.0, '161': 11666.0, '162': 11666.0, '163': 11570.0, '164': 11666.0, '165': 11650.0, '166': 11650.0, '167': 11746.0, '168': 11730.0, '169': 11586.0, '170': 11634.0, '171': 11618.0, '172': 11602.0, '173': 11554.0, '174': 11682.0, '175': 11730.0, '176': 11618.0, '177': 11714.0, '178': 11682.0, '179': 11682.0}
d={'100': 11922.0, '101': 11922.0, '102': 12002.0, '103': 11986.0, '104': 11986.0, '105': 11890.0, '106': 11906.0, '107': 11954.0, '108': 11874.0, '109': 11922.0, '110': 11986.0, '111': 11938.0, '112': 12002.0, '113': 12050.0, '114': 11954.0, '115': 11858.0, '116': 11906.0, '117': 11794.0, '118': 11970.0, '119': 11986.0, '120': 11826.0, '121': 11922.0, '122': 11874.0, '123': 11842.0, '124': 11938.0, '125': 11922.0, '126': 11810.0, '127': 11906.0, '128': 11858.0, '129': 11858.0, '130': 11922.0, '131': 11858.0, '132': 11906.0, '133': 11810.0, '134': 11938.0, '135': 11826.0, '136': 11810.0, '137': 11842.0, '138': 11906.0, '139': 11058.0, '140': 11762.0, '141': 11554.0, '142': 11010.0, '143': 11250.0, '144': 11778.0, '145': 11602.0, '146': 11586.0, '147': 11522.0, '148': 11538.0, '149': 11490.0, '150': 11682.0, '151': 11474.0, '152': 11570.0, '153': 11346.0, '154': 11570.0, '155': 11474.0, '156': 11554.0, '157': 11458.0, '158': 11474.0, '159': 11490.0, '160': 11458.0, '161': 11458.0, '162': 11474.0, '163': 11490.0, '164': 11538.0, '165': 11618.0, '166': 11554.0, '167': 11522.0, '168': 11458.0, '169': 11458.0, '170': 11474.0, '171': 11538.0, '172': 11474.0, '173': 11426.0, '174': 11586.0, '175': 11442.0, '176': 11570.0, '177': 11858.0, '178': 11554.0, '179': 11458.0}

def sigmoid(x):
  return 1 / (1 + np.exp(-x))

# Filter requirements.
T = 5.0         # Sample Period
fs = 30.0       # sample rate, Hz
cutoff = 2      # desired cutoff frequency of the filter, Hz ,      slightly higher than actual 1.2 Hznyq = 0.5 * fs  # Nyquist Frequencyorder = 2       # sin wave can be approx represented as quadratic
n = int(T * fs) # total number of samples
nyq = 0.5 * fs  # Nyquist Frequency

order = 2       # sin wave can be approx represented as quadratic
n = int(T * fs) # total number of samples

def butter_lowpass_filter(data, cutoff, fs, order):
    normal_cutoff = cutoff / nyq
    # Get the filter coefficients 
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    y = filtfilt(b, a, data)
    return y

arrays=[a,b,c,d]
data=[]
for ar in arrays:
  data.append(np.array(list(a.values())))

data=np.average(np.array(data),axis=0) 


y = butter_lowpass_filter(data, cutoff, fs, order)
#y=data
#plt.plot(y)
y=np.array(y)
#plt.xticks(np.arange(100,180,10),[100,110,120,130,140,150,160,170])
plt.plot(np.array(y)/np.max(y))
plt.xlabel("Degrees past point of stretch")
plt.ylabel("Unit of stretch smoothed")
            
plt.show()