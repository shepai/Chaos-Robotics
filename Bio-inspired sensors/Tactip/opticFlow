
# import the opencv library
import cv2 as cv
import numpy as np
  
# define a video capture object
cap = cv.VideoCapture(0)
  

# params for ShiTomasi corner detection
feature_params = dict( maxCorners = 100,
                       qualityLevel = 0.3,
                       minDistance = 7,
                       blockSize = 7 )
# Parameters for lucas kanade optical flow
lk_params = dict( winSize  = (15, 15),
                  maxLevel = 2,
                  criteria = (cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03))
# Create some random colors
color = np.random.randint(0, 255, (100, 3))
# Take first frame and find corners in it
ret, old_frame = cap.read()
old_gray = cv.cvtColor(old_frame, cv.COLOR_BGR2GRAY)
p0 = cv.goodFeaturesToTrack(old_gray, mask = None, **feature_params)
# Create a mask image for drawing purposes
mask = np.zeros_like(old_frame)

begin=[]

while(1):
    #vectors=[]
    ret, frame = cap.read()
    if not ret:
        print('No frames grabbed!')
        break
    frame_gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    #binary
    #frame_gray[frame_gray>245]=255
    #frame_gray[frame_gray<=245]=0
    # calculate optical flow
    p1, st, err = cv.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)
    # Select good points
    if p1 is not None:
        good_new = p1[st==1]
        good_old = p0[st==1]
    # draw the tracks
    started=False
    if len(begin)==0: #has not been chosen
        started=True
    """if len(begin)!=len(good_new):
        begin=[]
        started=True"""
    mask = np.zeros_like(old_frame) 
    for i, (new, old) in enumerate(zip(good_new[0:10], good_old[0:10])):
        a, b = new.ravel()
        c, d = old.ravel()
        #mask = cv.line(mask, (int(a), int(b)), (int(c), int(d)), color[i].tolist(), 2)
        #mask = cv.arrowedLine(mask, (int(a), int(b)), (int(c), int(d)), color[i].tolist(), 2)
        frame = cv.circle(frame, (int(a), int(b)), 5, color[i].tolist(), -1)
        if started:
            begin.append([c, d])
    
    for i in range(len(begin)):
        if i<len(begin) and i<len(good_new):
            vy=begin[i][1]-good_new[i][1]
            vx=begin[i][0]-good_new[i][0]
            #vectors.append([vx,vy])
            mask = cv.arrowedLine(mask, (int(begin[i][0]), int(begin[i][1])), (int(good_new[i][0]), int(good_new[i][1])), color[i].tolist(), 2)
    
    #img = cv.add(frame, mask)
    cv.imshow('frame', frame)
    cv.imshow('displacement', mask)
    k = cv.waitKey(1) & 0xff
    if k == ord('q'):
        break
    elif k == ord('r'):
        begin=[]
        img = frame.copy()
        mask = np.zeros_like(old_frame)
        old_gray = cv.cvtColor(old_frame, cv.COLOR_BGR2GRAY)
        p0 = cv.goodFeaturesToTrack(old_gray, mask = None, **feature_params)
        print("reset")

    # Now update the previous frame and previous points
    old_gray = frame_gray.copy()
    p0 = good_new.reshape(-1, 1, 2)
cv.destroyAllWindows()